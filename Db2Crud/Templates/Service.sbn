using Microsoft.EntityFrameworkCore;
using {{ rootns }}.Common;
using {{ rootns }}.Data;
using {{ rootns }}.Interfaces;

namespace {{ rootns }}.Services;

[System.CodeDom.Compiler.GeneratedCode("db2crud","1.0.0")]
public partial class {{ t.EntityName }}Service : I{{ t.EntityName }}Service
{
    private readonly {{ contextName }} _db;
    public {{ t.EntityName }}Service({{ contextName }} db) => _db = db;

    public async Task<ApiResponse<IEnumerable<{{ rootns }}.Dtos.{{ t.EntityName }}.{{ t.EntityName }}ReadDto>>> GetAllAsync()
    {
        var items = await _db.Set<{{ rootns }}.Entities.{{ t.EntityName }}>().AsNoTracking().ToListAsync();
        return ApiResponse<IEnumerable<{{ rootns }}.Dtos.{{ t.EntityName }}.{{ t.EntityName }}ReadDto>>.Ok(items.Select(MapToReadDto));
    }

    public async Task<ApiResponse<{{ rootns }}.Dtos.{{ t.EntityName }}.{{ t.EntityName }}ReadDto>> GetByIdAsync({{ t.KeyClrType }} id)
    {
        var entity = await _db.Set<{{ rootns }}.Entities.{{ t.EntityName }}>().FindAsync(id);
        if (entity == null) return ApiResponse<{{ rootns }}.Dtos.{{ t.EntityName }}.{{ t.EntityName }}ReadDto>.Fail("Not found");
        return ApiResponse<{{ rootns }}.Dtos.{{ t.EntityName }}.{{ t.EntityName }}ReadDto>.Ok(MapToReadDto(entity));
    }

    public async Task<ApiResponse<{{ rootns }}.Dtos.{{ t.EntityName }}.{{ t.EntityName }}ReadDto>> CreateAsync({{ rootns }}.Dtos.{{ t.EntityName }}.{{ t.EntityName }}CreateDto dto)
    {
        var entity = MapFromCreateDto(dto);
        _db.Set<{{ rootns }}.Entities.{{ t.EntityName }}>().Add(entity);
        await _db.SaveChangesAsync();
        return ApiResponse<{{ rootns }}.Dtos.{{ t.EntityName }}.{{ t.EntityName }}ReadDto>.Ok(MapToReadDto(entity));
    }

    public async Task<ApiResponse<{{ rootns }}.Dtos.{{ t.EntityName }}.{{ t.EntityName }}ReadDto>> UpdateAsync({{ t.KeyClrType }} id, {{ rootns }}.Dtos.{{ t.EntityName }}.{{ t.EntityName }}UpdateDto dto)
    {
        var entity = await _db.Set<{{ rootns }}.Entities.{{ t.EntityName }}>().FindAsync(id);
        if (entity == null) return ApiResponse<{{ rootns }}.Dtos.{{ t.EntityName }}.{{ t.EntityName }}ReadDto>.Fail("Not found");
        MapIntoEntity(entity, dto);
        await _db.SaveChangesAsync();
        return ApiResponse<{{ rootns }}.Dtos.{{ t.EntityName }}.{{ t.EntityName }}ReadDto>.Ok(MapToReadDto(entity));
    }

    public async Task<ApiResponse<bool>> DeleteAsync({{ t.KeyClrType }} id)
    {
        var entity = await _db.Set<{{ rootns }}.Entities.{{ t.EntityName }}>().FindAsync(id);
        if (entity == null) return ApiResponse<bool>.Fail("Not found");
        _db.Remove(entity);
        await _db.SaveChangesAsync();
        return ApiResponse<bool>.Ok(true);
    }

    private static {{ rootns }}.Dtos.{{ t.EntityName }}.{{ t.EntityName }}ReadDto MapToReadDto({{ rootns }}.Entities.{{ t.EntityName }} e) => new {{ rootns }}.Dtos.{{ t.EntityName }}.{{ t.EntityName }}ReadDto(
        {{~ for c in t.Columns ~}}
        e.{{ c.CsName ?? c.Name }}{{ if !for.last }},{{ end }}
        {{~ end ~}}
    );

    private static {{ rootns }}.Entities.{{ t.EntityName }} MapFromCreateDto({{ rootns }}.Dtos.{{ t.EntityName }}.{{ t.EntityName }}CreateDto d) => new {{ rootns }}.Entities.{{ t.EntityName }} {
        {{~ for c in t.Columns ~}}
        {{- if c.Name != t.KeyColumn -}}
        {{ c.CsName ?? c.Name }} = d.{{ c.CsName ?? c.Name }}{{ if !for.last }},{{ end }}
        {{- end -}}
        {{~ end ~}}
    };

    private static void MapIntoEntity({{ rootns }}.Entities.{{ t.EntityName }} e, {{ rootns }}.Dtos.{{ t.EntityName }}.{{ t.EntityName }}UpdateDto d)
    {
        {{~ for c in t.Columns ~}}
        {{- if c.Name != t.KeyColumn -}}
        e.{{ c.CsName ?? c.Name }} = d.{{ c.CsName ?? c.Name }};
        {{- end -}}
        {{~ end ~}}
    }
}
