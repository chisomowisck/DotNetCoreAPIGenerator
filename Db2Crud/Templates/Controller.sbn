using Microsoft.AspNetCore.Mvc;
using {{ rootns }}.Common;
using {{ rootns }}.Interfaces;

namespace {{ rootns }}.Controllers;

[ApiController]
[Route("api/[controller]")]
public partial class {{ t.Name }}Controller : ControllerBase
{
    private readonly I{{ t.EntityName }}Service _svc;
    public {{ t.EntityName }}Controller(I{{ t.EntityName }}Service svc) => _svc = svc;

    [HttpGet]
    public async Task<ActionResult<ApiResponse<IEnumerable<{{ rootns }}.Dtos.{{ t.EntityName }}.{{ t.EntityName }}ReadDto>>>> GetAll()
        => Ok(await _svc.GetAllAsync());

    [HttpGet("{id}")]
    public async Task<ActionResult<ApiResponse<{{ rootns }}.Dtos.{{ t.EntityName }}.{{ t.EntityName }}ReadDto>>> GetById({{ t.KeyClrType }} id)
        => Ok(await _svc.GetByIdAsync(id));

    [HttpPost]
    public async Task<ActionResult<ApiResponse<{{ rootns }}.Dtos.{{ t.EntityName }}.{{ t.EntityName }}ReadDto>>> Create([FromBody] {{ rootns }}.Dtos.{{ t.EntityName }}.{{ t.EntityName }}CreateDto dto)
        => Ok(await _svc.CreateAsync(dto));

    [HttpPut("{id}")]
    public async Task<ActionResult<ApiResponse<{{ rootns }}.Dtos.{{ t.EntityName }}.{{ t.EntityName }}ReadDto>>> Update({{ t.KeyClrType }} id, [FromBody] {{ rootns }}.Dtos.{{ t.EntityName }}.{{ t.EntityName }}UpdateDto dto)
        => Ok(await _svc.UpdateAsync(id, dto));

    [HttpDelete("{id}")]
    public async Task<ActionResult<ApiResponse<bool>>> Delete({{ t.KeyClrType }} id)
        => Ok(await _svc.DeleteAsync(id));
}
